openapi: 3.0.0
servers:
  - url: http://localhost:8080
    description: Book publishing service server
info:
  description: Spring Boot application for managing a book publishing house.
  version: 1.0.0
  title: Book Publishing Service
tags:
  - name: Author
  - name: Book
paths:
  /authors:
    post:
      tags:
        - Author
      summary: Add a new Author
      operationId: createAuthor
      security:
        - bearerAuth: []
      responses:
        '201':
          $ref: '#/components/responses/CreatedResponse'
        '400':
          description: 400 BAD REQUEST Response to POST Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                InvalidRequestParameter:
                  value:
                    timestamp: "2023-03-06T16:40:54.027+00:00"
                    status: 400
                    message: "Bad Request"
                    path: "/authors"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      requestBody:
        $ref: '#/components/requestBodies/CreateOrUpdateAuthorRequest'
      parameters: []
    get:
      tags:
        - Author
      summary: Get all Authors
      operationId: getAllAuthors
      responses:
        '200':
          description: 200 OK Response to GET Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorList'
              example:
                _embedded:
                  item:
                    name: J. K. Rowling
                    numOfBooks: 10
                    _links:
                      self:
                        href: '{{baseURL}}/authors/00000000-0000-0000-0000-000000000000'
                      books:
                        href: '{{baseURL}}/authors/00000000-0000-0000-0000-000000000000/books'
                _links:
                  self:
                    href: '{{baseURL}}/authors?page=1&size=1&sort=createdAt,desc'
                  first:
                    href: '{{baseURL}}/authors?page=1&size=1&sort=createdAt,desc'
                  next:
                    href: '{{baseURL}}/authors?page=2&size=1&sort=createdAt,desc'
                  last:
                    href: '{{baseURL}}/authors?page=10&size=1&sort=createdAt,desc'
                page:
                  size: 1
                  totalElements: 10
                  totalPages: 10
                  number: 1

      parameters:
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
  /authors/{id}:
    put:
      tags:
        - Author
      summary: Update Author
      operationId: updateAuthor
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/updateId'
      responses:
        '200':
          description: 200 OK Response to PUT Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
              example:
                name: J. K. Rowling
                numberOfBooks: 10
                _links:
                  self:
                    href: '{{baseURL}}/authors/00000000-0000-0000-0000-000000000000'
                  books:
                    href: '{{baseURL}}/authors/00000000-0000-0000-0000-000000000000/books'
        '400':
          description: 400 BAD REQUEST Response to PUT Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                InvalidRequestParameter:
                  value:
                    timestamp: "2023-03-06T16:40:54.027+00:00"
                    status: 400
                    message: "Bad Request"
                    path: "/authors/{id}"
                AuthorNotFound:
                  value:
                    title: "Author not found"
                    status: 404
                    detail: "Author not founds: ID = 00000000-0000-0000-0000-000000000000"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      requestBody:
        $ref: '#/components/requestBodies/CreateOrUpdateAuthorRequest'
    get:
      summary: Retrieve Author
      tags:
        - Author
      operationId: getAuthor
      parameters:
        - $ref: '#/components/parameters/pathId'
      responses:
        '200':
          description: 200 OK Response to GET Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
              example:
                name: J. K. Rowling
                numberOfBooks: 10
                _links:
                  self:
                    href: '{{baseURL}}/authors/00000000-0000-0000-0000-000000000000'
                  books:
                    href: '{{baseURL}}/authors/00000000-0000-0000-0000-000000000000/books'
        '400':
          description: 400 BAD REQUEST Response to GET Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                InvalidRequestParameter:
                  value:
                    timestamp: "2023-03-06T16:40:54.027+00:00"
                    status: 400
                    message: "Bad Request"
                    path: "/authors/{id}"
                AuthorNotFound:
                  value:
                    title: "Author not found"
                    status: 404
                    detail: "Author not founds: ID = 00000000-0000-0000-0000-000000000000"
  /books/{id}/authors:
    get:
      summary: Get authors for book
      tags:
        - Author
      description: Get all authors for a given book
      operationId: getAuthorsForBook
      parameters:
        - $ref: '#/components/parameters/pathId'
      responses:
        '200':
          description: 200 OK Response to GET Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorList'
              example:
                _embedded:
                  item:
                    name: J. K. Rowling
                    numberOfBooks: 10
                    _links:
                      self:
                        href: '{{baseURL}}/authors/00000000-0000-0000-0000-000000000000'
                      books:
                        href: '{{baseURL}}/authors/00000000-0000-0000-0000-000000000000/books'
                _links:
                  self:
                    href: '{{baseURL}}/books/00000000-0000-0000-0000-000000000000/authors'
                  first:
                    href: '{{baseURL}}/books/00000000-0000-0000-0000-000000000000/authors?page=1&size=1&sort=createdAt,desc'
                  next:
                    href: '{{baseURL}}/books/00000000-0000-0000-0000-000000000000/authors?page=2&size=1&sort=createdAt,desc'
                  last:
                    href: '{{baseURL}}/books/00000000-0000-0000-0000-000000000000/authors?page=10&size=1&sort=createdAt,desc'
                page:
                  size: 1
                  totalElements: 10
                  totalPages: 10
                  number: 1
        '400':
          description: 400 BAD REQUEST Response to GET Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              example:
                BookNotFound:
                  value:
                    title: "Book not found"
                    status: 404
                    detail: "Book not found: ID = 00000000-0000-0000-0000-000000000000"
  /books:
    post:
      summary: Publish a book
      tags:
        - Book
      operationId: createBook
      security:
        - bearerAuth: [ ]
      description: Publish a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishBook'
            example:
              title: "The Grass is Always Greener"
              isbn: "1-86092-049-7"
              genre: Modern Times
              authors:
                - href: "{{baseURL}}/authors/00000000-0000-0000-0000-000000000000"
      responses:
        '201':
          $ref: '#/components/responses/CreatedResponse'
        '400':
          description: 400 BAD REQUEST Response to POST Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                InvalidRequestParameter:
                  value:
                    timestamp: "2023-03-06T16:40:54.027+00:00"
                    status: 400
                    message: "Bad Request"
                    path: "/books"
                InvalidUuids:
                  value:
                    title: "Invalid UUID"
                    status: 400
                    detail: "The following UUID is not valid: 00000000-0000-0000-0000-000000000000"
                AuthorNotFound:
                  value:
                    title: "Author not found"
                    status: 404
                    detail: "Author not founds: ID = 00000000-0000-0000-0000-000000000000"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    get:
      summary: Get all books
      tags:
        - Book
      operationId: getAllBooks
      parameters:
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/title'
        - $ref: '#/components/parameters/isbn'
        - $ref: '#/components/parameters/genre'
        - $ref: '#/components/parameters/authorName'
      responses:
        '200':
          description: 200 OK Response to GET request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookList'
              example:
                _embedded:
                  item:
                    title: "The Grass is Always Greener"
                    isbn: "1-86092-049-7"
                    genre: Modern Times
                    _links:
                      self:
                        href: '{{baseURL}}/books/00000000-0000-0000-0000-000000000000'
                      authors:
                        href: '{{baseURL}}/books/00000000-0000-0000-0000-000000000000/authors'

                _links:
                  self:
                    href: '{{baseURL}}/books?page=1&size=1&sort=createdAt,desc'
                  first:
                    href: '{{baseURL}}/books?page=1&size=1&sort=createdAt,desc'
                  next:
                    href: '{{baseURL}}/books?page=2&size=1&sort=createdAt,desc'
                  last:
                    href: '{{baseURL}}/books?page=10&size=1&sort=createdAt,desc'
                page:
                  size: 1
                  totalElements: 10
                  totalPages: 10
                  number: 1
  /books/{id}:
    get:
      summary: Retrieve Book
      tags:
        - Book
      operationId: getBook
      parameters:
        - $ref: '#/components/parameters/pathId'
      responses:
        '200':
          description: 200 OK Response to GET Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
              example:
                title: "The Grass is Always Greener"
                isbn: "1-86092-049-7"
                genre: Modern Times
                _links:
                  self:
                    href: '{{baseURL}}/books/00000000-0000-0000-0000-000000000000'
                  authors:
                    href: '{{baseURL}}/books/00000000-0000-0000-0000-000000000000/authors'
        '400':
          description: 400 BAD REQUEST Response to GET Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                InvalidRequestParameter:
                  value:
                    timestamp: "2023-03-06T16:40:54.027+00:00"
                    status: 400
                    message: "Bad Request"
                    path: "/books/{id}"
                AuthorNotFound:
                  value:
                    title: "Book not found"
                    status: 404
                    detail: "Book not founds: ID = 00000000-0000-0000-0000-000000000000"
  /authors/{id}/books:
    get:
      summary: Get books for author
      tags:
        - Book
      description: Get all books for a given author
      operationId: getBooksForAuthor
      parameters:
        - $ref: '#/components/parameters/pathId'
      responses:
        '200':
          description: 200 OK Response to GET Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookList'
              example:
                _embedded:
                  item:
                    title: "The Grass is Always Greener"
                    isbn: "1-86092-049-7"
                    genre: Modern Times
                    _links:
                      self:
                        href: '{{baseURL}}/books/00000000-0000-0000-0000-000000000000'
                      authors:
                        href: '{{baseURL}}/books/00000000-0000-0000-0000-000000000000/authors'
                _links:
                  self:
                    href: '{{baseURL}}/authors/00000000-0000-0000-0000-000000000000/books?page=1&size=1'
                  first:
                    href: '{{baseURL}}/authors/00000000-0000-0000-0000-000000000000/books?page=0&size=1'
                  next:
                    href: '{{baseURL}}/authors/00000000-0000-0000-0000-000000000000/books?page=2&size=1'
                  last:
                    href: '{{baseURL}}/authors/00000000-0000-0000-0000-000000000000/books?page=10&size=1'
                page:
                  size: 1
                  totalElements: 10
                  totalPages: 10
                  number: 1
        '400':
          description: 400 BAD REQUEST Response to GET Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              example:
                BookNotFound:
                  value:
                    title: "Book not found"
                    status: 404
                    detail: "Book not found: ID = 00000000-0000-0000-0000-000000000000"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Author:
      type: object
      properties:
        name:
          type: string
        numOfBooks:
          type: integer
        _links:
          required:
            - self
            - books
          allOf:
            - $ref: '#/components/schemas/SelfLink'
    AuthorLink:
      properties:
        href:
          type: string
          format: uri
    AuthorList:
      required:
        - _links
        - page
      properties:
        _embedded:
          required:
            - item
          properties:
            item:
              type: array
              items:
                $ref: '#/components/schemas/Author'
        _links:
          required:
            - self
          allOf:
            - $ref: '#/components/schemas/PaginationLinks'
            - $ref: '#/components/schemas/SelfLink'
        page:
          required:
            - size
            - totalElements
            - totalPages
            - number
          allOf:
            - $ref: '#/components/schemas/Page'
    Book:
      properties:
        title:
          type: string
        isbn:
          type: string
        genre:
          type: string
        _links:
          required:
            - self
            - authors
          allOf:
            - $ref: '#/components/schemas/SelfLink'
    BookList:
      required:
        - _links
        - page
      properties:
        _embedded:
          required:
            - item
          properties:
            item:
              type: array
              items:
                $ref: '#/components/schemas/Book'
        _links:
          required:
            - self
          allOf:
            - $ref: '#/components/schemas/PaginationLinks'
            - $ref: '#/components/schemas/SelfLink'
        page:
          required:
            - size
            - totalElements
            - totalPages
            - number
          allOf:
            - $ref: '#/components/schemas/Page'
    PublishBook:
      required:
        - title
        - isbn
        - genre
        - authors
      properties:
        title:
          type: string
        isbn:
          type: string
        genre:
          type: string
        authors:
          type: array
          items:
            $ref: '#/components/schemas/AuthorLink'
    SelfLink:
      properties:
        self:
          readOnly: true
          properties:
            href:
              type: string
              format: uri
    PaginationLinks:
      properties:
        first:
          properties:
            href:
              type: string
              format: uri
        next:
          properties:
            href:
              type: string
              format: uri
        prev:
          properties:
            href:
              type: string
              format: uri
        last:
          properties:
            href:
              type: string
              format: uri
    Page:
      properties:
        size:
          type: integer
        totalElements:
          type: integer
        totalPages:
          type: integer
        number:
          type: integer
    ErrorMessage:
      required:
        - timestamp
        - status
        - error
        - path
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string
        path:
          type: string
          format: uri
  requestBodies:
    CreateOrUpdateAuthorRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - photoUrls
            properties:
              name:
                type: string
                example: J. K. Rowling
      required: true
  parameters:
    title:
      name: title
      in: query
      description: Book title.
      schema:
        type: string
    isbn:
      name: isbn
      in: query
      description: Book identification number.
      schema:
        type: string
    genre:
      name: genre
      in: query
      description: Book genre.
      schema:
        type: string
    authorName:
      name: name
      in: query
      description: Name of the author.
      schema:
        type: string
    pathId:
      name: id
      in: path
      required: true
      description: The id of the resource to retrieve.
      schema:
        type: string
        format: uuid
    updateId:
      name: id
      in: path
      required: true
      description: The id of the resource to update.
      schema:
        type: string
        format: uuid
    pageNumber:
      name: page
      in: query
      description: Page in pagination order to display.
      schema:
        type: integer
        minimum: 1
    pageSize:
      name: size
      in: query
      description: Number of elements on a page.
      schema:
        type: integer
        minimum: 1
    sort:
      name: sort
      in: query
      description: Sort order of results.
      schema:
        type: string
  responses:
    CreatedResponse:
      description: 201 CREATED Response
      headers:
        Location:
          $ref: '#/components/headers/Location'
    UnauthorizedError:
      description: 401 Unauthorized Error
      headers:
        WWW-Authenticate:
          $ref: '#/components/headers/WWW-Authenticate'
  headers:
    Location:
      description: HTTP Location Header
      schema:
        type: string
    WWW-Authenticate:
      description: Defines the authentication method that should be used to gain access to a resource.
      schema:
        type: string
        enum: [ Bearer ]
  links: {}
  callbacks: {}
security: []
