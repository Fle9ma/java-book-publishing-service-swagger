openapi: 3.0.0
info:
  description: Spring Boot application for managing a book publishing house.
  version: 1.0.0
  title: Book Publishing Service
tags:
  - name: Author
  - name: Book
paths:
  /authors:
    post:
      tags:
        - Author
      summary: Add a new Author
      operationId: createAuthor
      responses:
        '201':
          $ref: '#/components/responses/CreatedResponse'
        '400':
          description: 400 BAD REQUEST Response to POST Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                InvalidRequestParameter:
                  value:
                    timestamp: "2023-03-06T16:40:54.027+00:00"
                    status: 400
                    message: "Bad Request"
                    path: "/authors"
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
      requestBody:
        $ref: '#/components/requestBodies/CreateOrUpdateAuthorRequest'
      parameters: []
    get:
      tags:
        - Author
      summary: Get all Authors
      operationId: getAllAuthors
      responses:
        '200':
          description: 200 OK Response to GET Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorList'
              example:
                _embedded:
                  item:
                    name: J. K. Rowling
                    numOfBooks: 20
                    _links:
                      self:
                        href: '{{baseURL}}/authors/00000000-0000-0000-0000-000000000000'
                _links:
                  self:
                    href: '{{baseURL}}/authors?page=1&size=1&sort=createdAt,desc'
                  first:
                    href: '{{baseURL}}/authors?page=1&size=1&sort=createdAt,desc'
                  next:
                    href: '{{baseURL}}/authors?page=2&size=1&sort=createdAt,desc'
                  last:
                    href: '{{baseURL}}/authors?page=10&size=1&sort=createdAt,desc'
                page:
                  size: 1
                  totalElements: 10
                  totalPages: 10
                  number: 1

      parameters:
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
components:
  schemas:
    Author:
      type: object
      properties:
        name:
          type: string
        numOfBooks:
          type: integer
        _links:
          required:
            - self
          allOf:
            - $ref: '#/components/schemas/SelfLink'
    AuthorList:
      required:
        - _links
        - page
      properties:
        _embedded:
          required:
            - item
          properties:
            item:
              type: array
              items:
                $ref: '#/components/schemas/Author'
        _links:
          required:
            - self
          allOf:
            - $ref: '#/components/schemas/PaginationLinks'
            - $ref: '#/components/schemas/SelfLink'
        page:
          required:
            - size
            - totalElements
            - totalPages
            - number
          allOf:
            - $ref: '#/components/schemas/Page'
    SelfLink:
      properties:
        self:
          readOnly: true
          properties:
            href:
              type: string
              format: uri
    PaginationLinks:
      properties:
        first:
          properties:
            href:
              type: string
              format: uri
        next:
          properties:
            href:
              type: string
              format: uri
        prev:
          properties:
            href:
              type: string
              format: uri
        last:
          properties:
            href:
              type: string
              format: uri
    Page:
      properties:
        size:
          type: integer
        totalElements:
          type: integer
        totalPages:
          type: integer
        number:
          type: integer
    ErrorMessage:
      required:
        - timestamp
        - status
        - error
        - path
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string
        path:
          type: string
          format: uri
  requestBodies:
    CreateOrUpdateAuthorRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - photoUrls
            properties:
              name:
                type: string
                example: J. K. Rowling
      required: true
  parameters:
    pageNumber:
      name: page
      in: query
      description: Page in pagination order to display.
      schema:
        type: integer
        minimum: 1
    pageSize:
      name: size
      in: query
      description: Number of elements on a page.
      schema:
        type: integer
        minimum: 1
    sort:
      name: sort
      in: query
      description: Sort order of results.
      schema:
        type: string
  responses:
    CreatedResponse:
      description: 201 CREATED Response
      headers:
        Location:
          $ref: '#/components/headers/Location'
    UnauthorizedResponse:
      description: 401 Unauthorized Error
      headers:
        WWW-Authenticate:
          $ref: '#/components/headers/WWW-Authenticate'
  headers:
    Location:
      description: HTTP Location Header
      schema:
        type: string
    WWW-Authenticate:
      description: Defines the authentication method that should be used to gain access to a resource.
      schema:
        type: string
        enum: [ Bearer ]
  links: {}
  callbacks: {}
security: []
